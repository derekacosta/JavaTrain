{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red221\green40\blue103;\red217\green232\blue247;\red230\green230\blue250;
\red18\green144\blue195;\red249\green250\blue244;\red102\green225\blue248;\red30\green181\blue64;\red121\green171\blue255;
\red237\green127\blue72;\red104\green151\blue187;\red255\green191\blue38;\red167\green236\blue33;\red98\green98\blue98;
\red141\green218\blue248;\red23\green198\blue163;\red98\green98\blue98;}
{\*\expandedcolortbl;;\csgenericrgb\c86667\c15686\c40392;\csgenericrgb\c85098\c90980\c96863;\csgenericrgb\c90196\c90196\c98039;
\csgenericrgb\c7059\c56471\c76471;\csgenericrgb\c97647\c98039\c95686;\csgenericrgb\c40000\c88235\c97255;\csgenericrgb\c11765\c70980\c25098;\csgenericrgb\c47451\c67059\c100000;
\csgenericrgb\c92941\c49804\c28235;\csgenericrgb\c40784\c59216\c73333;\csgenericrgb\c100000\c74902\c14902;\csgenericrgb\c65490\c92549\c12941;\csgenericrgb\c38431\c38431\c38431;
\csgenericrgb\c55294\c85490\c97255;\csgenericrgb\c9020\c77647\c63922;\csgenericrgb\c38431\c38431\c38431;}
\margl1440\margr1440\vieww15780\viewh12860\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs22 \cf2 package\cf3  thread\cf4 ;\cf0 \
\
\cf2 public\cf3  \cf2 class\cf3  \cf5 Calculator\cf3  \cf6 \{\cf0 \
\cf3 	\cf2 int\cf6 []\cf3  \cf7 array\cf4 ;\cf0 \
\cf3 	\cf2 long\cf3  \cf7 sum\cf4 ;\cf0 \
\cf3 	\cf2 int\cf3  \cf7 numOfThreads\cf4 ;\cf0 \
\cf3 	\cf0 \
\cf3 	\cf2 public\cf3  \cf8 Calculator\cf6 (\cf2 int\cf3  \cf9 numOfThreads\cf4 ,\cf3  \cf2 int\cf3  \cf9 arrayLength\cf6 )\cf3  \cf6 \{\cf0 \
\cf3 		\cf2 this\cf4 .\cf7 numOfThreads\cf3  \cf4 =\cf3  \cf9 numOfThreads\cf4 ;\cf0 \
\cf3 		\cf7 array\cf3  \cf4 =\cf3  \cf2 new\cf3  \cf2 int\cf6 [\cf9 arrayLength\cf6 ]\cf4 ;\cf0 \
\cf3 		\cf2 for\cf3  \cf6 (\cf2 int\cf3  \cf10 i\cf3  \cf4 =\cf3  \cf11 0\cf4 ;\cf3  \cf12 i\cf3  \cf4 <\cf3  \cf7 array\cf4 .\cf7 length\cf4 ;\cf3  \cf12 i\cf4 ++\cf6 )\cf0 \
\cf3 			\cf7 array\cf6 [\cf12 i\cf6 ]\cf3  \cf4 =\cf3  \cf12 i\cf4 ;\cf0 \
\cf3 		\cf7 sum\cf3  \cf4 =\cf3  \cf11 0\cf4 ;\cf0 \
\cf3 	\cf6 \}\cf0 \
\
\cf3 	\cf0 \
\cf3 	\cf2 public\cf3  \cf2 long\cf3  \cf8 calculate\cf6 ()\cf3  \cf6 \{\cf0 \
\cf3 		\cf7 sum\cf3  \cf4 =\cf3  \cf11 0\cf4 ;\cf0 \
\cf3 		\cf0 \
\cf3 		\cf5 WorkerThread\cf3  \cf6 []\cf3  \cf10 workers\cf3  \cf4 =\cf3  \cf2 new\cf3  \cf5 WorkerThread\cf3  \cf6 [\cf7 numOfThreads\cf6 ]\cf4 ;\cf0 \
\cf3 		\cf0 \
\cf3 		\cf2 for\cf3  \cf6 (\cf2 int\cf3  \cf10 i\cf4 =\cf11 0\cf4 ;\cf3  \cf12 i\cf4 <\cf7 numOfThreads\cf4 ;\cf12 i\cf4 ++\cf6 )\{\cf0 \
\cf3 			\cf12 workers\cf6 [\cf12 i\cf6 ]\cf3  \cf4 =\cf3  \cf2 new\cf3  \cf13 WorkerThread\cf3  \cf6 (\cf12 i\cf4 *\cf7 array\cf4 .\cf7 length\cf4 /\cf7 numOfThreads\cf4 ,\cf3  \cf6 (\cf12 i\cf4 +\cf11 1\cf6 )\cf4 *\cf7 array\cf4 .\cf7 length\cf4 /\cf7 numOfThreads\cf6 )\cf4 ;\cf0 \
\cf3 			\cf12 workers\cf6 [\cf12 i\cf6 ]\cf4 .\cf13 start\cf6 ()\cf4 ;\cf0 \
\cf3 		\cf6 \}\cf0 \
\cf3 		\cf0 \
\cf3 		\cf2 for\cf3  \cf6 (\cf2 int\cf3  \cf10 i\cf4 =\cf11 0\cf4 ;\cf12 i\cf4 <\cf7 numOfThreads\cf4 ;\cf12 i\cf4 ++\cf6 )\{\cf0 \
\cf3 			\cf12 \ul \ulc12 workers\cf6 \ulc6 [\cf12 \ulc12 i\cf6 \ulc6 ]\cf4 \ulc4 .\cf13 \ulc13 join\cf6 \ulc6 ()\cf4 \ulnone ; \cf14 // waiting for the thread workers[i] and waiting for them all to complete\cf0 \
\pard\pardeftab720\partightenfactor0
\cf3 		\cf6 \}\cf0 \
\cf3 		\cf0 \
\cf3 		\cf5 System\cf4 .\cf15 out\cf4 .\cf13 println\cf6 (\cf16 "Total sum = "\cf3  \cf4 +\cf3  \cf7 sum\cf6 )\cf4 ;\cf0 \
\cf3 		\cf17 // Spawn numOfThreads threads, and let each thread handle a fraction of the array\cf0 \
\cf3 		\cf17 // For simplicity, each thread handles [i*array.length / numOfThreads, (i+1) *array.length / numOfThreads )\cf0 \
\cf3 		\cf0 \
\cf3 		\cf2 return\cf3  \cf7 sum\cf4 ;\cf0 \
\cf3 	\cf6 \}\cf0 \
\cf3 	\cf0 \
\cf3 	\cf2 public\cf3  \cf2 class\cf3  \cf5 WorkerThread\cf3  \cf2 extends\cf3  \cf5 Thread\cf6 \{\cf0 \
\cf3 		\cf2 int\cf3  \cf7 lowerBound\cf4 ;\cf0 \
\cf3 		\cf2 int\cf3  \cf7 upperBound\cf4 ;\cf0 \
\cf3 		\cf0 \
\cf3 		\cf2 public\cf3  \cf8 WorkerThread\cf6 (\cf2 int\cf3  \cf9 lowerBound\cf4 ,\cf3  \cf2 int\cf3  \cf9 upperBound\cf6 )\{\cf0 \
\cf3 			\cf2 this\cf4 .\cf7 lowerBound\cf3  \cf4 =\cf3  \cf9 lowerBound\cf4 ;\cf0 \
\cf3 			\cf2 this\cf4 .\cf7 upperBound\cf3  \cf4 =\cf3  \cf9 upperBound\cf4 ;\cf0 \
\cf3 		\cf6 \}\cf0 \
\cf3 		\cf0 \
\cf3 		\cf2 public\cf3  \cf2 void\cf3  \cf8 run\cf6 ()\{\cf0 \
\cf3 			\cf2 for\cf3  \cf6 (\cf2 int\cf3  \cf10 i\cf3  \cf4 =\cf3  \cf7 lowerBound\cf4 ;\cf3  \cf12 i\cf3  \cf4 <\cf3  \cf7 upperBound\cf4 ;\cf3  \cf12 i\cf4 ++\cf6 )\{\cf0 \
\cf3 				\cf7 sum\cf3  \cf4 +=\cf3  \cf7 array\cf6 [\cf12 i\cf6 ]\cf4 ;\cf0 \
\cf3 			\cf6 \}\cf0 \
\cf3 		\cf6 \}\cf0 \
\cf3 	\cf6 \}\cf0 \
\cf3 	\cf0 \
\cf3 	\cf17 //using synchronized - allow only one thread to use this function\cf0 \
\cf3 	\cf17 // synchronized (array[i])\{\cf0 \
\cf3 	\cf17 //       sum += array[i];\}\cf0 \
\
\cf3 	\cf2 public\cf3  \cf2 static\cf3  \cf2 void\cf3  \cf8 main\cf6 (\cf5 String\cf3  \cf9 args\cf6 [])\cf3  \cf6 \{\cf0 \
\cf3 		\cf2 int\cf3  \cf10 numOfThreads\cf3  \cf4 =\cf3  \cf11 1\cf4 ;\cf0 \
\
\cf3 		\cf5 Calculator\cf3  \cf10 cal\cf3  \cf4 =\cf3  \cf2 new\cf3  \cf13 Calculator\cf6 (\cf12 numOfThreads\cf4 ,\cf3  \cf11 1000\cf6 )\cf4 ;\cf0 \
\cf3 		\cf12 cal\cf4 .\cf13 calculate\cf6 ()\cf4 ;\cf0 \
\cf3 	\cf6 \}\cf3 	\cf0 \
\cf6 \}}